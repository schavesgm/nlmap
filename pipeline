#!/bin/bash

# ** Usage of each script
# -- make_map.sh path_to_protein_data name_of_map
# -- build_from_mtz.sh protein simulation_name
# -- build_from_map.sh path_to_map_files map_name
# -- json_log.py protein sim_name
# -- plot_bucc.py protein sim_name
# -- plot_hists.py protein sim_name
# -- plot_envstats.py protein sim_name

# -- Obtain the base path where the code is located
export BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# -- Source some assertion functions and the helper message
source ${BASE_PATH}/scripts/shell/checks.sh
source ${BASE_PATH}/scripts/shell/help.sh

if [[ ${1} == "help" ]]; then
    print_help; exit 0
fi

# -- Check that CCP4_PATH environment is available
assert_var_exists "CCP4_PATH" ${CCP4_PATH}

# -- Set some needed variables for the simulation
PROTEIN=${1};               assert_var_exists "protein"   ${1}
SIGMA=$(printf %.4f ${2});  assert_var_exists "noise_std" ${2}
HPERC=$(printf %.4f ${3});  assert_var_exists "h_perc"    ${3}
R_ENV=$(printf %.4f ${4});  assert_var_exists "r_env"  ${4}
PFEPS=$(printf %.4f ${5});  assert_var_exists "pref_eps"  ${5}

# -- Directories to the scripts
MAKE_MAP=${BASE_PATH}/scripts/shell/make_map.sh
BUILD_MTZ=${BASE_PATH}/scripts/shell/build_from_mtz.sh
BUILD_MAP=${BASE_PATH}/scripts/shell/build_from_map.sh
JSON_LOG=${BASE_PATH}/scripts/python/json_log/json_log.py
PLOT_BUCC=${BASE_PATH}/scripts/python/plot_bucc/plot_bucc.py
PLOT_HIST=${BASE_PATH}/scripts/python/plot_hists/plot_hists.py
PLOT_STAT=${BASE_PATH}/scripts/python/plot_envstats/plot_envstats.py

# -- Name of the protein to process
DATA_PATH="$(pwd)/data"; PROT_PATH="${DATA_PATH}/${PROTEIN}"

# -- Check if data directory exists and check if protein exists
assert_dir_exists "${DATA_PATH}" 
assert_dir_exists "${PROT_PATH}"

# -- Create some directories if not present
mkdir -p out/data/${PROTEIN} out/log/${PROTEIN}

# -- Log some information to the console
header_message "Path to CCP4 software is ${CCP4_PATH}"
header_message "Protein selected: ${PROTEIN}"
header_message "Standard deviation of added noise: ${SIGMA}"
header_message "Proportion used in denoising parameter: ${HPERC}"
header_message "Radious used in environments: ${R_ENV} (A)"
header_message "Prefiler epsilon: ${PFEPS}"

# -- Generate a variable containing the specific map file for this run
MAP_FILE=refmac_${RANDOM}_${HPERC}.map

# -- Create a .map file from the .mtz file
header_message "Creating .map file from .mtz (${PROT_PATH}/refmac.mtz)"
${MAKE_MAP} ${PROT_PATH} refmac.map
${MAKE_MAP} ${PROT_PATH} ${MAP_FILE}

# -- Generate the noisy and denoised versions of the map
header_message "Processing the maps using ./denoise_map"
HDEN=$(${BASE_PATH}/denoise_map ${PROT_PATH} ${MAP_FILE} ${SIGMA} ${HPERC} ${R_ENV} ${PFEPS})

# -- Restrict the denoiser parameter to 4 digits
HDEN=$(printf %.4f ${HDEN})

# -- Specific name of the simulation to be used
SIM_NAME="s${SIGMA}_h${HDEN}_r${R_ENV}_p${HPERC}_e${PFEPS}"

# -- Copy the needed reference data to the correct location
OUT_DATA_PATH=out/data/${PROTEIN}/${SIM_NAME}
mkdir -p ${OUT_DATA_PATH}/refmtz/files ${OUT_DATA_PATH}/refmap/files

# -- Refmtz  and refmap needed files
copy_files ${PROT_PATH} ${OUT_DATA_PATH}/refmtz/files
copy_files ${PROT_PATH} ${OUT_DATA_PATH}/refmap/files

# -- Copy the reference map file to process it
cp ${PROT_PATH}/refmac.map ${OUT_DATA_PATH}/refmap/files

# -- Build the reference model from the .mtz file
header_message "Building reference model from reference mtz file"
${BUILD_MTZ} ${PROTEIN} ${SIM_NAME}

# -- Build the reference model from the .map file
header_message "Building reference model from reference map file"
${BUILD_MAP} ${OUT_DATA_PATH}/refmap/files refmac.map

# -- Remove the copied original map, as it is not needed anymore
rm ${PROT_PATH}/${MAP_FILE}

# -- Build a model for each processed map file
for map_file in "noisy" "denoised"; do

    # -- Generate the path to the map file
    PATH_TO_MAP=${OUT_DATA_PATH}/${map_file}/files/

    # -- Assert the existence of the path
    assert_file_exists ${PATH_TO_MAP}/${map_file}.map

    # -- Copy the needed files to run buccaneer
    copy_files ${PROT_PATH} ${PATH_TO_MAP}

    # Echo some data to the console
    header_message "Building model from map file: ${SIM_NAME} -- ${map_file}"

    # Process the map with the correct script
    ${BUILD_MAP} ${PATH_TO_MAP} ${map_file}.map
done

# -- Obtain a log file from the protein data
header_message "Creating a log file for ${PROTEIN}: ${SIM_NAME}"
python3 ${JSON_LOG} ${PROTEIN} ${SIM_NAME}

# -- Generate the plots from the log data
header_message "Generating log plots for ${PROTEIN}: ${SIM_NAME}"
python3 ${PLOT_BUCC} ${PROTEIN} ${SIM_NAME}

# -- Obtain the histogram plot from the data
header_message "Generating histogram plot for ${PROTEIN}: ${SIM_NAME}"
python3 ${PLOT_HIST} ${PROTEIN} ${SIM_NAME}

# -- Plot the table of averages from the data
header_message "Generating environment average plots for ${PROTEIN}: ${SIM_NAME}"
python3 ${PLOT_STAT} ${PROTEIN} ${SIM_NAME}

# -- Convert all the png files into pdf files
for png_file in $(ls out/log/${PROTEIN}/${SIM_NAME}/*.png); do
    convert ${png_file} ${png_file/.png/.pdf}
done
