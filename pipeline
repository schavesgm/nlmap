#!/bin/bash

# ** Usage of each script
# -- make_map.sh path_to_protein_data
# -- build_from_mtz.sh path_to_protein_data (overwrite_flag)
# -- build_from_map.sh map_file path_to_protein_data out_name
# -- json_log.py path_to_out_protein
# -- plot_histogram.py simulation_name path_to_protein_data path_to_out_log
# -- plot_table_of_avg.py path_to_map simulation_name out_path

# -- Obtain the base path where the code is located
export BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# -- Source some assertion functions
source ${BASE_PATH}/scripts/shell/checks.sh

# -- Check that 
assert_var_exists "CCP4_PATH" ${CCP4_PATH}

# -- Set some needed variables for the simulation
PROTEIN=${1};               assert_var_exists "protein"   ${1}
SIGMA=$(printf %.4f ${2});  assert_var_exists "noise_std" ${2}
HPERC=$(printf %.4f ${3});  assert_var_exists "h_perc"    ${3}
RCOMP=$(printf %.4f ${4});  assert_var_exists "r_compar"  ${4}
PFEPS=$(printf %.4f ${5});  assert_var_exists "pref_eps"  ${5}

# -- Directories to the scripts
MAKE_MAP="${BASE_PATH}/scripts/shell/make_map.sh"
BUILD_MTZ="${BASE_PATH}/scripts/shell/build_from_mtz.sh"
BUILD_MAP="${BASE_PATH}/scripts/shell/build_from_map.sh"
JSON_LOG="${BASE_PATH}/scripts/python/json_log/json_log.py"
HIST_PLOT="${BASE_PATH}/scripts/python/map_histograms/plot_histograms.py"
LOG_PLOT="${BASE_PATH}/scripts/python/plot_log/plot_log.py"
TABLE_PLOT="${BASE_PATH}/scripts/python/plot_table_of_avg/plot_table_of_avg.py"

# -- Name of the protein to process
DATA_PATH="$(pwd)/data"; PROT_PATH="${DATA_PATH}/${PROTEIN}"

# -- Check if data directory exists and check if protein exists
assert_dir_exists "${DATA_PATH}" 
assert_dir_exists "${PROT_PATH}"

# -- Create some directories if not present
mkdir -p ${DATA_PATH}/${PROTEIN}/maps

# -- Log some information to the console
header_message "Path to CCP4 software is ${CCP4_PATH}"
header_message "Protein selected: ${PROTEIN}"
header_message "Standard deviation of added noise: ${SIGMA}"
header_message "Proportion used in denoising parameter: ${HPERC}"
header_message "Radious of comparison: ${RCOMP} (A)"
header_message "Prefiler epsilon: ${PFEPS}"

# -- Create a .map file from the .mtz file
header_message "Creating .map file from .mtz (${PROT_PATH}/refmac.mtz)"
${MAKE_MAP} ${PROT_PATH}

# -- Build the reference model from the .mtz file
header_message "Building reference model from reference refmac.mtz"
${BUILD_MTZ} ${PROT_PATH}
   
# -- Build the reference model from the .map file
header_message "Building reference model from reference refmac.map"
${BUILD_MAP} refmac.map ${PROT_PATH} refmap
  
# -- Generate the noisy and denoised versions of the map
header_message "Processing the maps using ./denoise_map"
HDEN=$(${BASE_PATH}/denoise_map ${PROT_PATH} refmac.map ${SIGMA} ${HPERC} ${RCOMP} ${PFEPS})

# -- Restrict the denoiser to 4 digits
HDEN=$(printf %.4f ${HDEN})

# -- Specific name of the simulation name
SIM_NAME="s${SIGMA}_h${HDEN}_r${RCOMP}_p${HPERC}_e${PFEPS}"
 
# -- Build a model for each processed map file
for file in $(ls ${PROT_PATH}/maps/${SIM_NAME}/*.map); do

    # Basename of the file
    base=$(basename -- ${file})

    # Echo some data to the console
    header_message "Building model from map file ${base}"

    # Location of the map file inside ${PROT_PATH}
    MAP_LOC=maps/${SIM_NAME}/${base}

    # Output folder inside ./out
    OUT_PATH=${SIM_NAME}/${base/.map/}

    # Process the map with the correct script
    ${BUILD_MAP} ${MAP_LOC} ${PROT_PATH} ${OUT_PATH} "overwrite"
done

# -- Obtain a log file from the protein data
header_message "Creating a log file from the processed pipeline"
python3 ${JSON_LOG} $(pwd)/out/${PROTEIN} ${SIM_NAME}

# -- Generate the plots from the log data
header_message "Generating log plots from the processed pipeline"
python3 ${LOG_PLOT} ./out/log/${PROTEIN}/${SIM_NAME}

# -- Obtain the histogram plot from the data
header_message "Generating histogram plot from the processed pipeline"
python3 ${HIST_PLOT} ${SIM_NAME} ${PROT_PATH} ./out/log/${PROTEIN}/${SIM_NAME}

# -- Plot the table of averages from the data
header_message "Generating table of averages plots"
python3 ${TABLE_PLOT} ${PROT_PATH}/maps/${SIM_NAME} ${SIM_NAME} ./out/log/${PROTEIN}/${SIM_NAME}

# -- Convert all the png files into pdf files
for png_file in $(ls out/log/${PROTEIN}/${SIM_NAME}/*.png); do
    convert ${png_file} ${png_file/.png/.pdf}
done
